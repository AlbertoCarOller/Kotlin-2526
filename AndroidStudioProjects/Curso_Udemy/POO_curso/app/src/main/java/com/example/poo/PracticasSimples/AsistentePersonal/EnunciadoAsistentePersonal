El Ejercicio: El Gestor de Tareas de un Asistente Personal üìã

Imagina que est√°s construyendo un sistema para un asistente personal que te ayuda
a organizar tu d√≠a. Tienes diferentes tipos de tareas, y el asistente debe poder filtrarlas,
ordenarlas y procesarlas bas√°ndose en tus criterios.

Paso 1: La data class Tarea
Crea una data class llamada Tarea.
Debe tener las siguientes propiedades:
nombre (String)
categoria (String, por ejemplo: "Hogar", "Trabajo", "Personal")
prioridad (Int, del 1 al 5, donde 5 es la m√°s alta)
completada (Boolean)

Paso 2: El GestorTareas (el Singleton)
Crea un objeto singleton llamado GestorTareas.
Dentro de este objeto, crea una lista mutable (MutableList) que almacene objetos de tipo Tarea.
A√±ade un m√©todo agregarTarea(tarea: Tarea) que a√±ada una tarea a la lista.

Paso 3: La L√≥gica en main con Lambdas
En la funci√≥n main, crea varias instancias de Tarea con diferentes valores para sus propiedades.
Luego, utiliza los m√©todos de las colecciones de Kotlin junto con expresiones
lambda para realizar las siguientes operaciones:
Filtrado (filter): Crea una nueva lista que contenga solo las tareas
de la categor√≠a "Trabajo". Imprime el resultado.
Mapeo (map): Crea una nueva lista que contenga solo el nombre de las
tareas que tienen una prioridad de 5.
Ordenamiento (sortedByDescending): Crea una nueva lista de todas las tareas,
ordenadas de mayor a menor prioridad.
Combinaci√≥n de operaciones: Utiliza filter y forEach en una sola l√≠nea para encontrar todas
las tareas que no est√©n completadas y tengan una prioridad de 4 o 5. Para cada una, imprime un
mensaje que diga: "¬°Alerta! Tarea pendiente de alta prioridad: [nombre de la tarea]".
Verificaci√≥n (any): Usa any para verificar si hay alguna tarea en la categor√≠a "Hogar" que est√©
completada. Imprime "true" o "false" seg√∫n el resultado.